<?xml version="1.0" encoding="UTF-8"?>
<questestinterop xmlns="http://www.imsglobal.org/xsd/ims_qtiasiv1p2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.imsglobal.org/xsd/ims_qtiasiv1p2 http://www.imsglobal.org/xsd/ims_qtiasiv1p2p1.xsd">
  <assessment ident="g120ddf19739ed314ec064e9114857405" title="MERN Stack Frontend Development - Complete Quiz">
    <qtimetadata>
      <qtimetadatafield>
        <fieldlabel>qmd_timelimit</fieldlabel>
        <fieldentry>7200</fieldentry>
      </qtimetadatafield>
      <qtimetadatafield>
        <fieldlabel>cc_maxattempts</fieldlabel>
        <fieldentry>3</fieldentry>
      </qtimetadatafield>
    </qtimetadata>
    <section ident="root_section">
      <item ident="gf167c5b463c52ed26e1a992fd315c10b" title="Question 1">
        <itemmetadata>
          <qtimetadata>
            <qtimetadatafield>
              <fieldlabel>question_type</fieldlabel>
              <fieldentry>multiple_choice_question</fieldentry>
            </qtimetadatafield>
            <qtimetadatafield>
              <fieldlabel>points_possible</fieldlabel>
              <fieldentry>2.0</fieldentry>
            </qtimetadatafield>
            <qtimetadatafield>
              <fieldlabel>original_answer_ids</fieldlabel>
              <fieldentry>10916,10418,60019,97264</fieldentry>
            </qtimetadatafield>
            <qtimetadatafield>
              <fieldlabel>assessment_question_identifierref</fieldlabel>
              <fieldentry>g6e06c57487544612c458e263cd59abb1</fieldentry>
            </qtimetadatafield>
          </qtimetadata>
        </itemmetadata>
        <presentation>
          <material>
            <mattext texttype="text/html">&lt;div&gt;&lt;div class="text"&gt;
                  &lt;p&gt;&lt;strong&gt;Category:&lt;/strong&gt; React Fundamentals&lt;/p&gt;
                  &lt;p&gt;&lt;strong&gt;Difficulty:&lt;/strong&gt; beginner&lt;/p&gt;
                  &lt;p&gt;What is the correct way to create a functional component in React?&lt;/p&gt;
                  
                &lt;/div&gt;&lt;/div&gt;</mattext>
          </material>
          <response_lid ident="response1" rcardinality="Single">
            <render_choice>
              <response_label ident="10916">
                <material>
                  <mattext texttype="text/plain">function MyComponent() { return &lt;div&gt;Hello&lt;/div&gt;; }</mattext>
                </material>
              </response_label>
              <response_label ident="10418">
                <material>
                  <mattext texttype="text/plain">const MyComponent = () =&gt; { return &lt;div&gt;Hello&lt;/div&gt;; }</mattext>
                </material>
              </response_label>
              <response_label ident="60019">
                <material>
                  <mattext texttype="text/plain">const MyComponent = function() { return &lt;div&gt;Hello&lt;/div&gt;; }</mattext>
                </material>
              </response_label>
              <response_label ident="97264">
                <material>
                  <mattext texttype="text/plain">All of the above</mattext>
                </material>
              </response_label>
            </render_choice>
          </response_lid>
        </presentation>
        <resprocessing>
          <outcomes>
            <decvar maxvalue="100" minvalue="0" varname="SCORE" vartype="Decimal"/>
          </outcomes>
          <respcondition continue="No">
            <conditionvar>
              <varequal respident="response1">97264</varequal>
            </conditionvar>
            <setvar action="Set" varname="SCORE">100</setvar>
            <displayfeedback feedbacktype="Response" linkrefid="correct_fb"/>
          </respcondition>
          <respcondition continue="Yes">
            <conditionvar>
              <other/>
            </conditionvar>
            <displayfeedback feedbacktype="Response" linkrefid="general_incorrect_fb"/>
          </respcondition>
        </resprocessing>
        <itemfeedback ident="correct_fb">
          <flow_mat>
            <material>
              <mattext texttype="text/html">&lt;div style="color: #27ae60; "&gt;✓ Correct!&lt;/div&gt;
                  &lt;p&gt;All three syntaxes are valid ways to create functional components in React.&lt;/p&gt;</mattext>
            </material>
          </flow_mat>
        </itemfeedback>
        <itemfeedback ident="general_incorrect_fb">
          <flow_mat>
            <material>
              <mattext texttype="text/html">&lt;div style="color: #e74c3c; "&gt;✗ Incorrect&lt;/div&gt;
                  &lt;p&gt;The correct answer is: All of the above&lt;/p&gt;
                  &lt;p&gt;All three syntaxes are valid ways to create functional components in React.&lt;/p&gt;</mattext>
            </material>
          </flow_mat>
        </itemfeedback>
      </item>
      <item ident="g0e1c64a0f3615f8d85f234b39892921e" title="Question 2">
        <itemmetadata>
          <qtimetadata>
            <qtimetadatafield>
              <fieldlabel>question_type</fieldlabel>
              <fieldentry>multiple_choice_question</fieldentry>
            </qtimetadatafield>
            <qtimetadatafield>
              <fieldlabel>points_possible</fieldlabel>
              <fieldentry>2.0</fieldentry>
            </qtimetadatafield>
            <qtimetadatafield>
              <fieldlabel>original_answer_ids</fieldlabel>
              <fieldentry>22104,15207,5464,45211</fieldentry>
            </qtimetadatafield>
            <qtimetadatafield>
              <fieldlabel>assessment_question_identifierref</fieldlabel>
              <fieldentry>g29d6fa955681032d2924b125737252f9</fieldentry>
            </qtimetadatafield>
          </qtimetadata>
        </itemmetadata>
        <presentation>
          <material>
            <mattext texttype="text/html">&lt;div&gt;&lt;div class="text"&gt;
                  &lt;p&gt;&lt;strong&gt;Category:&lt;/strong&gt; React Fundamentals&lt;/p&gt;
                  &lt;p&gt;&lt;strong&gt;Difficulty:&lt;/strong&gt; beginner&lt;/p&gt;
                  &lt;p&gt;Which hook is used to manage state in functional components?&lt;/p&gt;
                  
                &lt;/div&gt;&lt;/div&gt;</mattext>
          </material>
          <response_lid ident="response1" rcardinality="Single">
            <render_choice>
              <response_label ident="22104">
                <material>
                  <mattext texttype="text/plain">useEffect</mattext>
                </material>
              </response_label>
              <response_label ident="15207">
                <material>
                  <mattext texttype="text/plain">useState</mattext>
                </material>
              </response_label>
              <response_label ident="5464">
                <material>
                  <mattext texttype="text/plain">useContext</mattext>
                </material>
              </response_label>
              <response_label ident="45211">
                <material>
                  <mattext texttype="text/plain">useReducer</mattext>
                </material>
              </response_label>
            </render_choice>
          </response_lid>
        </presentation>
        <resprocessing>
          <outcomes>
            <decvar maxvalue="100" minvalue="0" varname="SCORE" vartype="Decimal"/>
          </outcomes>
          <respcondition continue="No">
            <conditionvar>
              <varequal respident="response1">15207</varequal>
            </conditionvar>
            <setvar action="Set" varname="SCORE">100</setvar>
            <displayfeedback feedbacktype="Response" linkrefid="correct_fb"/>
          </respcondition>
          <respcondition continue="Yes">
            <conditionvar>
              <other/>
            </conditionvar>
            <displayfeedback feedbacktype="Response" linkrefid="general_incorrect_fb"/>
          </respcondition>
        </resprocessing>
        <itemfeedback ident="correct_fb">
          <flow_mat>
            <material>
              <mattext texttype="text/html">&lt;div style="color: #27ae60; "&gt;✓ Correct!&lt;/div&gt;
                  &lt;p&gt;useState is the primary hook for managing component state in functional components.&lt;/p&gt;</mattext>
            </material>
          </flow_mat>
        </itemfeedback>
        <itemfeedback ident="general_incorrect_fb">
          <flow_mat>
            <material>
              <mattext texttype="text/html">&lt;div style="color: #e74c3c; "&gt;✗ Incorrect&lt;/div&gt;
                  &lt;p&gt;The correct answer is: useState&lt;/p&gt;
                  &lt;p&gt;useState is the primary hook for managing component state in functional components.&lt;/p&gt;</mattext>
            </material>
          </flow_mat>
        </itemfeedback>
      </item>
      <item ident="g8e38eb71bc8c79dfeb0578bb523d4cba" title="Question 3">
        <itemmetadata>
          <qtimetadata>
            <qtimetadatafield>
              <fieldlabel>question_type</fieldlabel>
              <fieldentry>multiple_choice_question</fieldentry>
            </qtimetadatafield>
            <qtimetadatafield>
              <fieldlabel>points_possible</fieldlabel>
              <fieldentry>3.0</fieldentry>
            </qtimetadatafield>
            <qtimetadatafield>
              <fieldlabel>original_answer_ids</fieldlabel>
              <fieldentry>82302,71231,79495,72260</fieldentry>
            </qtimetadatafield>
            <qtimetadatafield>
              <fieldlabel>assessment_question_identifierref</fieldlabel>
              <fieldentry>gd30e9e65cf6e8dc2d0c7ed9c3b5c9a9e</fieldentry>
            </qtimetadatafield>
          </qtimetadata>
        </itemmetadata>
        <presentation>
          <material>
            <mattext texttype="text/html">&lt;div&gt;&lt;div class="text"&gt;
                  &lt;p&gt;&lt;strong&gt;Category:&lt;/strong&gt; React Fundamentals&lt;/p&gt;
                  &lt;p&gt;&lt;strong&gt;Difficulty:&lt;/strong&gt; intermediate&lt;/p&gt;
                  &lt;p&gt;What will this code output?&lt;/p&gt;
                  &lt;pre style="background: #f4f4f4; padding: 10px; border-radius: 4px; overflow-x: auto;"&gt;&lt;code&gt;const [count, setCount] = useState(0);

const handleClick = () =&amp;gt; {
  setCount(count + 1);
  setCount(count + 1);
  console.log(count);
};&lt;/code&gt;&lt;/pre&gt;
                &lt;/div&gt;&lt;/div&gt;</mattext>
          </material>
          <response_lid ident="response1" rcardinality="Single">
            <render_choice>
              <response_label ident="82302">
                <material>
                  <mattext texttype="text/plain">0, then count becomes 2</mattext>
                </material>
              </response_label>
              <response_label ident="71231">
                <material>
                  <mattext texttype="text/plain">2, then count becomes 2</mattext>
                </material>
              </response_label>
              <response_label ident="79495">
                <material>
                  <mattext texttype="text/plain">0, then count becomes 1</mattext>
                </material>
              </response_label>
              <response_label ident="72260">
                <material>
                  <mattext texttype="text/plain">1, then count becomes 2</mattext>
                </material>
              </response_label>
            </render_choice>
          </response_lid>
        </presentation>
        <resprocessing>
          <outcomes>
            <decvar maxvalue="100" minvalue="0" varname="SCORE" vartype="Decimal"/>
          </outcomes>
          <respcondition continue="No">
            <conditionvar>
              <varequal respident="response1">79495</varequal>
            </conditionvar>
            <setvar action="Set" varname="SCORE">100</setvar>
            <displayfeedback feedbacktype="Response" linkrefid="correct_fb"/>
          </respcondition>
          <respcondition continue="Yes">
            <conditionvar>
              <other/>
            </conditionvar>
            <displayfeedback feedbacktype="Response" linkrefid="general_incorrect_fb"/>
          </respcondition>
        </resprocessing>
        <itemfeedback ident="correct_fb">
          <flow_mat>
            <material>
              <mattext texttype="text/html">&lt;div style="color: #27ae60; "&gt;✓ Correct!&lt;/div&gt;
                  &lt;p&gt;State updates are asynchronous and batched. The console.log runs with the current value (0), and both setCount calls use the same stale closure value.&lt;/p&gt;</mattext>
            </material>
          </flow_mat>
        </itemfeedback>
        <itemfeedback ident="general_incorrect_fb">
          <flow_mat>
            <material>
              <mattext texttype="text/html">&lt;div style="color: #e74c3c; "&gt;✗ Incorrect&lt;/div&gt;
                  &lt;p&gt;The correct answer is: 0, then count becomes 1&lt;/p&gt;
                  &lt;p&gt;State updates are asynchronous and batched. The console.log runs with the current value (0), and both setCount calls use the same stale closure value.&lt;/p&gt;</mattext>
            </material>
          </flow_mat>
        </itemfeedback>
      </item>
      <item ident="g20f8795393e1200e8ce1adec558809c6" title="Question 4">
        <itemmetadata>
          <qtimetadata>
            <qtimetadatafield>
              <fieldlabel>question_type</fieldlabel>
              <fieldentry>multiple_choice_question</fieldentry>
            </qtimetadatafield>
            <qtimetadatafield>
              <fieldlabel>points_possible</fieldlabel>
              <fieldentry>2.0</fieldentry>
            </qtimetadatafield>
            <qtimetadatafield>
              <fieldlabel>original_answer_ids</fieldlabel>
              <fieldentry>61589,49479</fieldentry>
            </qtimetadatafield>
            <qtimetadatafield>
              <fieldlabel>assessment_question_identifierref</fieldlabel>
              <fieldentry>g6872beb061ae754f63eb61bd8b28ee2a</fieldentry>
            </qtimetadatafield>
          </qtimetadata>
        </itemmetadata>
        <presentation>
          <material>
            <mattext texttype="text/html">&lt;div&gt;&lt;div class="text"&gt;
                  &lt;p&gt;&lt;strong&gt;Category:&lt;/strong&gt; React Fundamentals&lt;/p&gt;
                  &lt;p&gt;&lt;strong&gt;Difficulty:&lt;/strong&gt; beginner&lt;/p&gt;
                  &lt;p&gt;useEffect runs after every render by default.&lt;/p&gt;
                  
                &lt;/div&gt;&lt;/div&gt;</mattext>
          </material>
          <response_lid ident="response1" rcardinality="Single">
            <render_choice>
              <response_label ident="61589">
                <material>
                  <mattext texttype="text/plain">True</mattext>
                </material>
              </response_label>
              <response_label ident="49479">
                <material>
                  <mattext texttype="text/plain">False</mattext>
                </material>
              </response_label>
            </render_choice>
          </response_lid>
        </presentation>
        <resprocessing>
          <outcomes>
            <decvar maxvalue="100" minvalue="0" varname="SCORE" vartype="Decimal"/>
          </outcomes>
          <respcondition continue="No">
            <conditionvar>
              <varequal respident="response1">61589</varequal>
            </conditionvar>
            <setvar action="Set" varname="SCORE">100</setvar>
            <displayfeedback feedbacktype="Response" linkrefid="correct_fb"/>
          </respcondition>
          <respcondition continue="Yes">
            <conditionvar>
              <other/>
            </conditionvar>
            <displayfeedback feedbacktype="Response" linkrefid="general_incorrect_fb"/>
          </respcondition>
        </resprocessing>
        <itemfeedback ident="correct_fb">
          <flow_mat>
            <material>
              <mattext texttype="text/html">&lt;div style="color: #27ae60; "&gt;✓ Correct!&lt;/div&gt;
                  &lt;p&gt;useEffect runs after every render when no dependency array is provided.&lt;/p&gt;</mattext>
            </material>
          </flow_mat>
        </itemfeedback>
        <itemfeedback ident="general_incorrect_fb">
          <flow_mat>
            <material>
              <mattext texttype="text/html">&lt;div style="color: #e74c3c; "&gt;✗ Incorrect&lt;/div&gt;
                  &lt;p&gt;The correct answer is: True&lt;/p&gt;
                  &lt;p&gt;useEffect runs after every render when no dependency array is provided.&lt;/p&gt;</mattext>
            </material>
          </flow_mat>
        </itemfeedback>
      </item>
      <item ident="g24498857cfbf7c909c1003cdb3b616e7" title="Question 5">
        <itemmetadata>
          <qtimetadata>
            <qtimetadatafield>
              <fieldlabel>question_type</fieldlabel>
              <fieldentry>multiple_choice_question</fieldentry>
            </qtimetadatafield>
            <qtimetadatafield>
              <fieldlabel>points_possible</fieldlabel>
              <fieldentry>2.0</fieldentry>
            </qtimetadatafield>
            <qtimetadatafield>
              <fieldlabel>original_answer_ids</fieldlabel>
              <fieldentry>4864,32639,48941,1409</fieldentry>
            </qtimetadatafield>
            <qtimetadatafield>
              <fieldlabel>assessment_question_identifierref</fieldlabel>
              <fieldentry>g87a19fa6afc90436cba5a12cc5f96eb5</fieldentry>
            </qtimetadatafield>
          </qtimetadata>
        </itemmetadata>
        <presentation>
          <material>
            <mattext texttype="text/html">&lt;div&gt;&lt;div class="text"&gt;
                  &lt;p&gt;&lt;strong&gt;Category:&lt;/strong&gt; React Fundamentals&lt;/p&gt;
                  &lt;p&gt;&lt;strong&gt;Difficulty:&lt;/strong&gt; beginner&lt;/p&gt;
                  &lt;p&gt;What is the correct syntax for conditional rendering in JSX?&lt;/p&gt;
                  
                &lt;/div&gt;&lt;/div&gt;</mattext>
          </material>
          <response_lid ident="response1" rcardinality="Single">
            <render_choice>
              <response_label ident="4864">
                <material>
                  <mattext texttype="text/plain">{condition ? &lt;div&gt;True&lt;/div&gt; : &lt;div&gt;False&lt;/div&gt;}</mattext>
                </material>
              </response_label>
              <response_label ident="32639">
                <material>
                  <mattext texttype="text/plain">{if(condition) &lt;div&gt;True&lt;/div&gt; else &lt;div&gt;False&lt;/div&gt;}</mattext>
                </material>
              </response_label>
              <response_label ident="48941">
                <material>
                  <mattext texttype="text/plain">{condition &amp;&amp; &lt;div&gt;True&lt;/div&gt;}</mattext>
                </material>
              </response_label>
              <response_label ident="1409">
                <material>
                  <mattext texttype="text/plain">Both a and c</mattext>
                </material>
              </response_label>
            </render_choice>
          </response_lid>
        </presentation>
        <resprocessing>
          <outcomes>
            <decvar maxvalue="100" minvalue="0" varname="SCORE" vartype="Decimal"/>
          </outcomes>
          <respcondition continue="No">
            <conditionvar>
              <varequal respident="response1">1409</varequal>
            </conditionvar>
            <setvar action="Set" varname="SCORE">100</setvar>
            <displayfeedback feedbacktype="Response" linkrefid="correct_fb"/>
          </respcondition>
          <respcondition continue="Yes">
            <conditionvar>
              <other/>
            </conditionvar>
            <displayfeedback feedbacktype="Response" linkrefid="general_incorrect_fb"/>
          </respcondition>
        </resprocessing>
        <itemfeedback ident="correct_fb">
          <flow_mat>
            <material>
              <mattext texttype="text/html">&lt;div style="color: #27ae60; "&gt;✓ Correct!&lt;/div&gt;
                  &lt;p&gt;Both ternary operator and logical AND operator are valid for conditional rendering.&lt;/p&gt;</mattext>
            </material>
          </flow_mat>
        </itemfeedback>
        <itemfeedback ident="general_incorrect_fb">
          <flow_mat>
            <material>
              <mattext texttype="text/html">&lt;div style="color: #e74c3c; "&gt;✗ Incorrect&lt;/div&gt;
                  &lt;p&gt;The correct answer is: Both a and c&lt;/p&gt;
                  &lt;p&gt;Both ternary operator and logical AND operator are valid for conditional rendering.&lt;/p&gt;</mattext>
            </material>
          </flow_mat>
        </itemfeedback>
      </item>
    </section>
  </assessment>
</questestinterop>
